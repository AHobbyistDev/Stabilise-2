<----<=World types=>---->

ServerWorld
  > Hosts the world, connects to clients
  + HostWorld
  + Server
ClientWorld
  > Gets world data from server
  + Client 
SingleplayerWorld
  > Self-sufficient world
  + HostWorld
  + Client (integrated)
ServerSingleplayerWorld
  > Combines ServerWorld and SingleplayerWorld
  + HostWorld
  + Client (integrated)
  + Server

<----<=Similarity Map=>---->

ClientWorld <-> SinglePlayerWorld
    Tracking the target player
  > How do I deal with this?
    - Wrap an AbstractWorld/HostWorld instance in a general "ClientWorld" class
ServerWorld <-> ServerSingleplayerWorld
    Server stuff
  > How do I deal with this?
    - Wrap a HostWorld instance
        - ServerWorld wraps an ordinary HostWorld
        - Force SingleplayerWorld to wrap a ServerWorld, which is treated separately

<----<=Type Hierarchy=>---->

IWorld
  > Every GameObject belongs to an IWorld
AbstractWorld implements IWorld
  > Implements things common to all types of worlds (e.g. entities, hitboxes, TEs, update())
HostWorld extends AbstractWorld
  > Implements things common to hosts (e.g. regions, world generator)

ServerWorld extends HostWorld
  > Implements client lists, player lists, client interactions
SingleplayerWorld extends HostWorld
  > Tracks a single player

ClientWorld extends AbstractWorld
  > Implements client stuff
